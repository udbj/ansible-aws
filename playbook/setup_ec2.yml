
# AWS playbook
---

- hosts: localhost
  connection: local
  gather_facts: False

    
  vars:
    key_name: my_aws
    region: ap-southeast-2
    image: ami-07fbdcfe29326c4fb

  tasks:

    - name: Facts
      block:

      - name: Get instances facts
        ec2_instance_info:
          aws_access_key: "{{ec2_access_key}}"
          aws_secret_key: "{{ec2_secret_key}}"
          region: "{{ region }}"
        register: result

      - name: Instances ID
        debug:
          msg: "ID: {{ item.instance_id }} - State: {{ item.state.name }} - Public DNS: {{ item.public_dns_name }}"
        loop: "{{ result.instances }}"

      tags: always


    - name: Provisioning EC2 instances
      block:


      - set_fact:
          id: "{{ 999999 | random }}"
        run_once: yes

      - set_fact:
          sec_group: "{{ id }}-sec"
        run_once: yes

      - name: Upload public key to AWS
        ec2_key:
          name: "{{ key_name }}"
          key_material: "{{ lookup('file', '/Users/dave/.ssh/{{ key_name }}.pub') }}"
          region: "{{ region }}"
          aws_access_key: "{{ec2_access_key}}"
          aws_secret_key: "{{ec2_secret_key}}"

      - name: Create security group
        ec2_group:
          name: "{{ sec_group }}"
          description: "Sec group for app {{ id }}"
          region: "{{ region }}"
          aws_access_key: "{{ec2_access_key}}"
          aws_secret_key: "{{ec2_secret_key}}"
          rules:
            - proto: tcp
              ports: 22
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on ssh port
            
            - proto: tcp
              ports:
                - 5984
                - 4369
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on couchdb port

            - proto: tcp
              from_port: 9100
              to_port: 9200
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on erlang ports
        register: result_sec_group

      - name: Provision instances
        ec2:
          aws_access_key: "{{ec2_access_key}}"
          aws_secret_key: "{{ec2_secret_key}}"
          key_name: "{{ key_name }}"
          id: "{{ id }}"
          group_id: "{{ result_sec_group.group_id }}"
          image: "{{ image }}"
          instance_type: t2.micro
          region: "{{ region }}"
          wait: true
          count: 3

      - meta: refresh_inventory
      
      - pause:
          minutes: 2

      tags: ['never', 'create_ec2','setup_full']

    - name: Clear instances
      block:
      
      - name: Terminate all instances
        ec2:
          aws_access_key: "{{ec2_access_key}}"
          aws_secret_key: "{{ec2_secret_key}}"
          region: "{{region}}"
          key_name: "{{ key_name }}"
          state: 'absent'
          instance_ids: "{{item.instance_id}}"
          wait: false
        loop: "{{result.instances}}"
        
      tags: ['never', 'clear_ec2']

- hosts: all

  tasks:
    - name: Test Dynamic Inventory
      block:
      - name: write current host 
        shell: echo {{inventory_hostname}} >> current.host
 
      - name: write all hosts
        shell: echo {{item}} >> all.hosts
        loop: "{{ansible_play_hosts}}"

      tags: ['never', 'test_inventory']

    - name: Setup Docker on Hosts
      block:

      - name: Install Docker pre-reqs 
        apt: 
          pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
          - python3-pip
          update_cache: yes
        become: yes

      - name: Add Docker CPG key
        shell: "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -"
        become: yes
        args:
          warn: false

      - name: Add Docker Repo
        apt_repository:
          repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable"
        become: yes

      - name: Install Docker
        apt:
          pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io 
          update_cache: yes
        become: yes

      - name: Install Python packages
        pip:
          name:
            - docker
            - docker-compose

      - name: Add user to docker group
        shell: usermod -aG docker ubuntu
        become: yes

      - meta: reset_connection

      - name: Pull CouchDB container
        docker_image:
          name: couchdb 
          source: pull


      tags: ['never','setup_docker','setup_full']

    - name: Setup CouchDB
      block:      

      - name: Launch couchDB container
        shell: docker run -e ERL_FLAGS="-setcookie \"{{erl_cookie}}\"" -e COUCHDB_USER={{couchdb_name}} -e COUCHDB_PASSWORD={{couchdb_hashed_pass}} -e NODENAME={{inventory_hostname}} -e COUCHDB_SECRET={{couchdb_secret}} -p 5984:5984 -p 4369:4369 -p 9100-9200:9100-9200 -d --name my-couchdb couchdb

      - pause:
          minutes: 1

      - name: Set cluster UUID
        shell: curl -X PUT http://{{couchdb_name}}:{{couchdb_pass}}@127.0.0.1:5984/_node/_local/_config/couchdb/uuid -d '"{{cluster_id}}"'
        register: shell_output
        args:
          warn: false

      - debug: var=shell_output.stdout_lines

      - name: Bind clustered interface to all IP addresses
        shell: curl -X PUT http://{{couchdb_name}}:{{couchdb_pass}}@127.0.0.1:5984/_node/_local/_config/chttpd/bind_address -d '"0.0.0.0"'
        args:
          warn: false

      - name: Set up nodes
        shell: curl -X POST -H "Content-Type:application/json" http://{{couchdb_name}}:{{couchdb_pass}}@127.0.0.1:5984/_cluster_setup -d '{"action":"enable_cluster", "bind_address":"0.0.0.0", "username":"{{couchdb_name}}", "password":"{{couchdb_pass}}", "node_count":"3"}'
        args:
          warn: false

      - name: Enable cluster for nodes
        shell: curl -X POST -H "Content-Type:application/json" http://{{couchdb_name}}:{{couchdb_pass}}@127.0.0.1:5984/_cluster_setup -d '{"action":"enable_cluster", "bind_address":"0.0.0.0", "username":"{{couchdb_name}}", "password":"{{couchdb_pass}}", "port":"5984", "node_count":"3", "remote_node":"{{item}}", "remote_current_user":"{{couchdb_name}}", "remote_current_password":"{{couchdb_pass}}" }'
        args:
          warn: false
        with_items: "{{ansible_play_hosts[1:]}}"
        when: inventory_hostname == ansible_play_hosts[0]
      
      - name: Add nodes to cluster
        shell: curl -X POST -H "Content-Type:application/json" http://{{couchdb_name}}:{{couchdb_pass}}@127.0.0.1:5984/_cluster_setup -d '{"action":"add_node", "host":"{{item}}", "port":"5984", "username":"{{couchdb_name}}", "password":"{{couchdb_pass}}"}'
        args:
          warn: false
        with_items: "{{ansible_play_hosts[1:]}}"
        when: inventory_hostname == ansible_play_hosts[0]

      - name: Finish cluster setup 
        shell: curl -X POST -H "Content-Type:application/json" http://{{couchdb_name}}:{{couchdb_pass}}@127.0.0.1:5984/_cluster_setup -d '{"action":"finish_cluster"}'
        args:
          warn: false
        when: inventory_hostname == ansible_play_hosts[0]

      - name: Install interface for python
        pip:
          name: couchdb

      tags: ['never','setup_couchdb','setup_full']
